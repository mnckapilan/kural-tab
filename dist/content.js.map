{"version":3,"file":"content.js","mappings":"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","sources":["webpack://kural-tab/./src/models.ts","webpack://kural-tab/./src/domUtils.ts","webpack://kural-tab/./src/kuralService.ts","webpack://kural-tab/./src/themeManager.ts","webpack://kural-tab/./src/kuralRenderer.ts","webpack://kural-tab/./src/content.ts"],"sourcesContent":["// models.ts - Interfaces and type definitions for the application\n/**\n * Theme constants\n */\nexport const THEME = {\n    LIGHT: \"light\",\n    DARK: \"dark\"\n};\n/**\n * CSS class constants\n */\nexport const CSS_CLASSES = {\n    LIGHT_MODE: \"light-mode\",\n    DARK_MODE: \"dark-mode\",\n    NO_TRANSITION: \"no-transition\"\n};\n/**\n * Element ID constants\n */\nexport const ELEMENT_IDS = {\n    KURAL: \"kural\",\n    EXPLANATION: \"explanation\",\n    MV: \"mv\",\n    NUMBER: \"number\",\n    METADATA: \"metadata\",\n    MODE_SWITCH: \"mode-switch\"\n};\n/**\n * File path constants\n */\nexport const FILE_PATHS = {\n    KURAL_DATA: \"data/thirukkural.json\",\n    METADATA: \"data/metadata.json\"\n};\n","/**\n * DOM operation error class for better error handling\n */\nexport class DOMOperationError extends Error {\n    constructor(message, elementId) {\n        super(message);\n        this.elementId = elementId;\n        this.name = 'DOMOperationError';\n        // Maintain proper stack trace\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, DOMOperationError);\n        }\n    }\n}\n/**\n * Safely get an HTML element by ID with proper type casting\n * @param id - The ID of the element to get\n * @returns The element or null if not found\n */\nexport function getElement(id) {\n    return document.getElementById(id);\n}\n/**\n * Set the inner HTML of an element safely\n * @param element - The element to update\n * @param content - The content to set\n * @throws DOMOperationError if element is provided but setting content fails\n */\nexport function setElementContent(element, content) {\n    if (!element)\n        return;\n    try {\n        element.innerHTML = content;\n    }\n    catch (error) {\n        const message = error instanceof Error\n            ? `Failed to set content: ${error.message}`\n            : 'Failed to set element content';\n        console.error(message, { element, content });\n        throw new DOMOperationError(message, element.id);\n    }\n}\n/**\n * Set styles on an element safely with improved typing\n * @param element - The element to style\n * @param styles - Object containing styles to apply\n * @returns True if all styles were applied successfully\n */\nexport function setStyles(element, styles) {\n    if (!element)\n        return false;\n    let success = true;\n    Object.entries(styles).forEach(([key, value]) => {\n        try {\n            // Use direct assignment which is safer than indexing\n            element.style[key] = value;\n        }\n        catch (error) {\n            success = false;\n            console.warn(`Unable to set style property ${key}:`, error);\n        }\n    });\n    return success;\n}\n/**\n * Add an event listener with type safety\n * @param elementId - ID of the element to add the listener to\n * @param eventType - Type of event to listen for\n * @param listener - Event listener function\n * @returns Function to remove the event listener\n */\nexport function addEventListenerById(elementId, eventType, listener) {\n    const element = getElement(elementId);\n    if (element) {\n        element.addEventListener(eventType, listener);\n        return () => element.removeEventListener(eventType, listener);\n    }\n    // Return a no-op function if element not found\n    return () => { };\n}\n/**\n * Create a new element with optional attributes and content\n * @param tagName - The tag name of the element to create\n * @param attributes - Optional attributes to set on the element\n * @param content - Optional content to set on the element\n * @returns The newly created element\n */\nexport function createElement(tagName, attributes, content) {\n    const element = document.createElement(tagName);\n    if (attributes) {\n        Object.entries(attributes).forEach(([key, value]) => {\n            element.setAttribute(key, value);\n        });\n    }\n    if (content) {\n        element.innerHTML = content;\n    }\n    return element;\n}\n/**\n * Safely append a child element to a parent element\n * @param parent - The parent element to append to\n * @param child - The child element to append\n * @returns The appended child element or null if parent not found\n */\nexport function appendElement(parent, child) {\n    if (!parent)\n        return null;\n    return parent.appendChild(child);\n}\n","// kuralService.ts - Service for fetching and processing Kural data\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FILE_PATHS } from './models';\n/**\n * Custom error for Kural data operations\n */\nexport class KuralDataError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        this.name = 'KuralDataError';\n        // Maintain proper stack trace in Node.js environments\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, KuralDataError);\n        }\n    }\n}\n/**\n * Service class for handling Kural data operations\n */\nexport class KuralService {\n    /**\n     * Fetches both Kural data and metadata\n     * @returns Promise with kural data and metadata\n     * @throws KuralDataError if fetch or data processing fails\n     */\n    static fetchKuralData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                const [kuralResponse, metadataResponse] = yield Promise.all([\n                    fetch(FILE_PATHS.KURAL_DATA),\n                    fetch(FILE_PATHS.METADATA),\n                ]);\n                if (!kuralResponse.ok) {\n                    throw new Error(`Failed to fetch Kural data: ${kuralResponse.status}`);\n                }\n                if (!metadataResponse.ok) {\n                    throw new Error(`Failed to fetch metadata: ${metadataResponse.status}`);\n                }\n                const kuralData = yield kuralResponse.json();\n                const metadataData = yield metadataResponse.json();\n                if (!((_a = kuralData === null || kuralData === void 0 ? void 0 : kuralData.kural) === null || _a === void 0 ? void 0 : _a.length)) {\n                    throw new Error(\"Invalid or empty Kural data received\");\n                }\n                if (!(metadataData === null || metadataData === void 0 ? void 0 : metadataData.length)) {\n                    throw new Error(\"Invalid or empty metadata received\");\n                }\n                return { kuralData, metadataData };\n            }\n            catch (error) {\n                const message = error instanceof Error\n                    ? `Error fetching Kural data: ${error.message}`\n                    : 'Unknown error fetching Kural data';\n                console.error(message, error);\n                throw new KuralDataError(message, error);\n            }\n        });\n    }\n    /**\n     * Selects a random Kural from the data\n     * @param kuralData The full kural dataset\n     * @returns A randomly selected kural\n     */\n    static getRandomKural(kuralData) {\n        const totalKurals = kuralData.kural.length;\n        const randomIndex = Math.floor(Math.random() * totalKurals);\n        return kuralData.kural[randomIndex];\n    }\n    /**\n     * Find metadata for a specific Kural number\n     * @param metadata - The metadata to search in\n     * @param kuralNumber - The kural number to find\n     * @returns The metadata result or null if not found\n     */\n    static findKuralMetadata(metadata, kuralNumber) {\n        var _a, _b, _c;\n        if (!((_a = metadata === null || metadata === void 0 ? void 0 : metadata.section) === null || _a === void 0 ? void 0 : _a.detail)) {\n            return null;\n        }\n        for (const section of metadata.section.detail) {\n            if (!((_b = section.chapterGroup) === null || _b === void 0 ? void 0 : _b.detail))\n                continue;\n            for (const chapterGroup of section.chapterGroup.detail) {\n                if (!((_c = chapterGroup.chapters) === null || _c === void 0 ? void 0 : _c.detail))\n                    continue;\n                for (const chapter of chapterGroup.chapters.detail) {\n                    if (kuralNumber >= chapter.start && kuralNumber <= chapter.end) {\n                        return {\n                            section: {\n                                name: section.translation,\n                                tamil: section.name,\n                            },\n                            chapter: {\n                                name: chapter.translation,\n                                tamil: chapter.name,\n                                number: chapter.number,\n                            },\n                        };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Generate the metadata HTML for a kural\n     * @param metadata The kural metadata\n     * @returns HTML string for the metadata\n     */\n    static generateMetadataHtml(metadata) {\n        if (!metadata)\n            return '';\n        return `<a href=\"https://thirukkural.gokulnath.com/#/thirukkuralchapters/${metadata.chapter.number}/thirukkurals\" target=\"_blank\" class=\"metadata-tree\">\n      <div class=\"section\">${metadata.section.tamil} – ${metadata.section.name}</div>\n      <div class=\"chapter\">${metadata.chapter.tamil} – ${metadata.chapter.name}</div>\n    </a>`;\n    }\n}\n","// themeManager.ts - Manages theme switching and persistence\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { THEME, CSS_CLASSES, ELEMENT_IDS } from './models';\nimport { getElement } from './domUtils';\n/**\n * Custom error class for theme-related operations\n */\nexport class ThemeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        this.name = 'ThemeError';\n        // Maintain proper stack trace\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ThemeError);\n        }\n    }\n}\n/**\n * Manages application theme (light/dark mode)\n */\nexport class ThemeManager {\n    /**\n     * Sets the initial theme based on saved preferences\n     * @throws ThemeError if there's an issue setting the initial theme\n     */\n    static setInitialTheme() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = document.body;\n                if (!body) {\n                    throw new ThemeError('Document body not found');\n                }\n                // Prevent transition flash by adding no-transition class\n                body.classList.add(CSS_CLASSES.NO_TRANSITION);\n                // Determine and set the theme\n                const theme = yield this.getSavedTheme();\n                this.setTheme(theme === THEME.LIGHT);\n                // Force a reflow to ensure the transition doesn't play on page load\n                void document.body.offsetWidth;\n                // Remove the no-transition class after a brief delay\n                setTimeout(() => {\n                    body.classList.remove(CSS_CLASSES.NO_TRANSITION);\n                }, 50);\n            }\n            catch (error) {\n                console.error(\"Error setting initial theme:\", error);\n                // Default to dark theme as fallback\n                this.setTheme(false);\n                // Remove the no-transition class\n                document.body.classList.remove(CSS_CLASSES.NO_TRANSITION);\n                throw new ThemeError(\"Failed to set initial theme\", error instanceof Error ? error : undefined);\n            }\n        });\n    }\n    /**\n     * Gets the saved theme from storage\n     * @returns Promise resolving to the saved theme or default (dark theme)\n     */\n    static getSavedTheme() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Type guard for Chrome API\n            if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {\n                try {\n                    const data = yield chrome.storage.sync.get(\"theme\");\n                    return data.theme || THEME.DARK;\n                }\n                catch (error) {\n                    console.error(\"Error retrieving theme from storage:\", error);\n                    return THEME.DARK; // Default to dark theme\n                }\n            }\n            return THEME.DARK; // Default to dark theme when not in Chrome extension\n        });\n    }\n    /**\n     * Toggle between light and dark mode\n     * @returns Whether light mode is active after toggling\n     */\n    static toggleTheme() {\n        const body = document.body;\n        const isLightMode = body.classList.toggle(CSS_CLASSES.LIGHT_MODE);\n        // Ensure dark mode class is also toggled correctly\n        if (isLightMode) {\n            body.classList.remove(CSS_CLASSES.DARK_MODE);\n        }\n        else {\n            body.classList.add(CSS_CLASSES.DARK_MODE);\n        }\n        // Save the theme preference\n        this.saveThemePreference(isLightMode);\n        return isLightMode;\n    }\n    /**\n     * Helper function to set the theme\n     * @param isLight - Whether to use light theme\n     */\n    static setTheme(isLight) {\n        const body = document.body;\n        const modeSwitch = getElement(ELEMENT_IDS.MODE_SWITCH);\n        if (isLight) {\n            body.classList.add(CSS_CLASSES.LIGHT_MODE);\n            body.classList.remove(CSS_CLASSES.DARK_MODE);\n        }\n        else {\n            body.classList.add(CSS_CLASSES.DARK_MODE);\n            body.classList.remove(CSS_CLASSES.LIGHT_MODE);\n        }\n        if (modeSwitch) {\n            modeSwitch.checked = isLight;\n        }\n    }\n    /**\n     * Save theme preference to storage\n     * @param isLightMode - Whether light mode is active\n     * @returns Promise that resolves when saving is complete\n     */\n    static saveThemePreference(isLightMode) {\n        const theme = isLightMode ? THEME.LIGHT : THEME.DARK;\n        // Type guard for Chrome API\n        if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {\n            return chrome.storage.sync\n                .set({ theme })\n                .catch((error) => {\n                console.error(\"Error saving theme:\", error);\n            });\n        }\n        return Promise.resolve();\n    }\n}\n","// kuralRenderer.ts - Handles rendering and UI updates for Kural content\nimport { ELEMENT_IDS } from './models';\nimport { DOMOperationError, getElement, setElementContent, setStyles } from './domUtils';\n/**\n * Responsible for rendering Kural content to the DOM\n */\nexport class KuralRenderer {\n    /**\n     * Get all UI elements needed for rendering\n     * @returns Object containing references to DOM elements or null if not found\n     */\n    static getUIElements() {\n        return {\n            kuralElement: getElement(ELEMENT_IDS.KURAL),\n            explanationElement: getElement(ELEMENT_IDS.EXPLANATION),\n            mvElement: getElement(ELEMENT_IDS.MV),\n            numberElement: getElement(ELEMENT_IDS.NUMBER),\n            metadataElement: getElement(ELEMENT_IDS.METADATA),\n        };\n    }\n    /**\n     * Validate that all required UI elements exist\n     * @param elements - The UI elements to validate\n     * @returns True if all elements exist, false otherwise\n     */\n    static validateUIElements(elements) {\n        return Object.values(elements).every(element => element !== null);\n    }\n    /**\n     * Render a Kural and its metadata to the UI\n     * @param kural - The Kural to render\n     * @param metadata - The Kural metadata\n     * @throws DOMOperationError if rendering fails\n     */\n    static renderKural(kural, metadata) {\n        try {\n            const elements = this.getUIElements();\n            if (!this.validateUIElements(elements)) {\n                throw new DOMOperationError(\"Required UI elements not found in the document\");\n            }\n            const { kuralElement, explanationElement, mvElement, numberElement, metadataElement } = elements;\n            // Render Kural text (we've validated they exist above)\n            this.renderKuralText(kuralElement, kural);\n            // Render explanation and meaning\n            setElementContent(explanationElement, kural.explanation);\n            setElementContent(mvElement, kural.mv);\n            // Render number and metadata\n            setElementContent(numberElement, `${kural.number}`);\n            this.renderMetadata(metadataElement, metadata);\n            // Adjust layout\n            this.adjustLayout(kuralElement, explanationElement, mvElement);\n        }\n        catch (error) {\n            console.error(\"Failed to render Kural:\", error);\n            this.renderError(error);\n            if (!(error instanceof DOMOperationError)) {\n                throw new DOMOperationError(\"Failed to render Kural content\", error instanceof Error ? error.message : undefined);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Renders the Kural text with proper line breaks\n     * @param element - The element to render into\n     * @param kural - The Kural to render\n     */\n    static renderKuralText(element, kural) {\n        setElementContent(element, `<div>${kural.line1}</div><div>${kural.line2}</div>`);\n    }\n    /**\n     * Renders the metadata with link\n     * @param element - The element to render into\n     * @param metadata - The metadata to render\n     */\n    static renderMetadata(element, metadata) {\n        if (!metadata) {\n            setElementContent(element, '');\n            return;\n        }\n        const metadataHtml = `\n      <a href=\"https://thirukkural.gokulnath.com/#/thirukkuralchapters/${metadata.chapter.number}/thirukkurals\" \n         target=\"_blank\" \n         class=\"metadata-tree\"\n         rel=\"noopener noreferrer\">\n        <div class=\"section\">${metadata.section.tamil} – ${metadata.section.name}</div>\n        <div class=\"chapter\">${metadata.chapter.tamil} – ${metadata.chapter.name}</div>\n      </a>\n    `;\n        setElementContent(element, metadataHtml);\n    }\n    /**\n     * Adjusts the layout to ensure proper alignment and widths\n     * @param kuralElement - The kural element\n     * @param explanationElement - The explanation element\n     * @param mvElement - The MV element\n     * @returns A promise that resolves when layout adjustments are complete\n     */\n    static adjustLayout(kuralElement, explanationElement, mvElement) {\n        return new Promise((resolve) => {\n            // Use requestAnimationFrame for layout operations to ensure DOM is ready\n            requestAnimationFrame(() => {\n                try {\n                    const kuralLines = kuralElement.getElementsByTagName(\"div\");\n                    if (kuralLines.length >= 2) {\n                        // Using Math.max with a spread operator for cleaner code\n                        const widths = Array.from(kuralLines).map(line => line.offsetWidth);\n                        const maxWidth = Math.max(...widths);\n                        if (maxWidth > 0) {\n                            setStyles(explanationElement, { width: `${maxWidth}px` });\n                            setStyles(mvElement, { width: `${maxWidth}px` });\n                        }\n                    }\n                    resolve();\n                }\n                catch (error) {\n                    console.warn(\"Layout adjustment failed:\", error);\n                    resolve(); // Resolve anyway to not block the flow\n                }\n            });\n        });\n    }\n    /**\n     * Renders an error state when something goes wrong\n     * @param error - The error that occurred\n     */\n    static renderError(error) {\n        try {\n            const elements = this.getUIElements();\n            let errorMessage = \"An unknown error occurred\";\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            }\n            else if (typeof error === 'string') {\n                errorMessage = error;\n            }\n            else if (error !== null && error !== undefined && typeof error === 'object') {\n                errorMessage = JSON.stringify(error);\n            }\n            console.error(\"Error loading Thirukkural:\", error);\n            // Set content even if elements are null (with null checks)\n            if (elements.kuralElement) {\n                setElementContent(elements.kuralElement, \"Failed to load Thirukkural\");\n            }\n            if (elements.explanationElement) {\n                setElementContent(elements.explanationElement, `Error: ${errorMessage}`);\n            }\n            if (elements.mvElement) {\n                setElementContent(elements.mvElement, \"\");\n            }\n            if (elements.numberElement) {\n                setElementContent(elements.numberElement, \"\");\n            }\n            if (elements.metadataElement) {\n                setElementContent(elements.metadataElement, \"\");\n            }\n        }\n        catch (secondaryError) {\n            // If rendering the error itself fails, log to console as last resort\n            console.error(\"Failed to render error state:\", secondaryError, \"Original error:\", error);\n        }\n    }\n}\n","// content.ts - Main entry point that orchestrates the application\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ELEMENT_IDS } from './models';\nimport { addEventListenerById } from './domUtils';\nimport { KuralService } from './kuralService';\nimport { ThemeManager } from './themeManager';\nimport { KuralRenderer } from './kuralRenderer';\n/**\n * Initializes and sets up the Thirukkural display\n */\nfunction setKural() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // Fetch the data using the service\n            const { kuralData, metadataData } = yield KuralService.fetchKuralData();\n            // Get random kural\n            const kural = KuralService.getRandomKural(kuralData);\n            // Find metadata\n            const kuralMetadata = KuralService.findKuralMetadata(metadataData[0], kural.number);\n            // Render the kural using our renderer\n            KuralRenderer.renderKural(kural, kuralMetadata);\n        }\n        catch (error) {\n            // Handle errors using our renderer\n            KuralRenderer.renderError(error);\n        }\n    });\n}\n/**\n * Initialize the application when the DOM is ready\n */\nfunction initializeApp() {\n    ThemeManager.setInitialTheme();\n    setKural();\n}\n/**\n * Set up event listeners\n */\nfunction setupEventListeners() {\n    addEventListenerById(ELEMENT_IDS.MODE_SWITCH, \"change\", () => {\n        ThemeManager.toggleTheme();\n    });\n    document.addEventListener(\"DOMContentLoaded\", initializeApp);\n}\n// Initialize event listeners\nsetupEventListeners();\n"],"names":["THEME","CSS_CLASSES","ELEMENT_IDS","DOMOperationError","Error","constructor","message","elementId","super","this","name","captureStackTrace","getElement","id","document","getElementById","setElementContent","element","content","innerHTML","error","console","setStyles","styles","success","Object","entries","forEach","key","value","style","warn","KuralDataError","cause","KuralService","fetchKuralData","thisArg","_arguments","generator","_a","kuralResponse","metadataResponse","Promise","all","fetch","ok","status","kuralData","json","metadataData","kural","length","P","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","getRandomKural","totalKurals","randomIndex","Math","floor","random","findKuralMetadata","metadata","kuralNumber","_b","_c","section","detail","chapterGroup","chapters","chapter","start","end","translation","tamil","number","generateMetadataHtml","ThemeError","ThemeManager","setInitialTheme","body","classList","add","theme","getSavedTheme","setTheme","offsetWidth","setTimeout","remove","undefined","chrome","storage","sync","get","toggleTheme","isLightMode","toggle","saveThemePreference","isLight","modeSwitch","checked","set","catch","KuralRenderer","getUIElements","kuralElement","explanationElement","mvElement","numberElement","metadataElement","validateUIElements","elements","values","every","renderKural","renderKuralText","explanation","mv","renderMetadata","adjustLayout","renderError","line1","line2","requestAnimationFrame","kuralLines","getElementsByTagName","widths","Array","from","map","line","maxWidth","max","width","errorMessage","JSON","stringify","secondaryError","addEventListener","addEventListenerById","kuralMetadata","setKural"],"sourceRoot":""}